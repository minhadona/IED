/* 
─────────────────────────────────────────────────────────────────────────────────────────────────
─██████████████───██████──██████─██████████████───██████████████───██████─────────██████████████─
─██░░░░░░░░░░██───██░░██──██░░██─██░░░░░░░░░░██───██░░░░░░░░░░██───██░░██─────────██░░░░░░░░░░██─
─██░░██████░░██───██░░██──██░░██─██░░██████░░██───██░░██████░░██───██░░██─────────██░░██████████─
─██░░██──██░░██───██░░██──██░░██─██░░██──██░░██───██░░██──██░░██───██░░██─────────██░░██─────────
─██░░██████░░████─██░░██──██░░██─██░░██████░░████─██░░██████░░████─██░░██─────────██░░██████████─
─██░░░░░░░░░░░░██─██░░██──██░░██─██░░░░░░░░░░░░██─██░░░░░░░░░░░░██─██░░██─────────██░░░░░░░░░░██─
─██░░████████░░██─██░░██──██░░██─██░░████████░░██─██░░████████░░██─██░░██─────────██░░██████████─
─██░░██────██░░██─██░░██──██░░██─██░░██────██░░██─██░░██────██░░██─██░░██─────────██░░██─────────
─██░░████████░░██─██░░██████░░██─██░░████████░░██─██░░████████░░██─██░░██████████─██░░██████████─
─██░░░░░░░░░░░░██─██░░░░░░░░░░██─██░░░░░░░░░░░░██─██░░░░░░░░░░░░██─██░░░░░░░░░░██─██░░░░░░░░░░██─
─████████████████─██████████████─████████████████─████████████████─██████████████─██████████████─
─────────────────────────────────────────────────────────────────────────────────────────────────
//          NORMAL 

#include <stdio.h>

void troca(int v[], int i, int j) {
   int x = v[i];
   v[i] = v[j];
   v[j] = x;
}

void bsort(int v[], int n) {
   for(int i=1; i<=n; i++)
      for(int j=0; j<n-i; j++)
         if( v[j]>v[j+1] )
            troca(v,j,j+1);
}

void exibe(int v[], int n) {
    for (int i=0; i<n; i++) printf("%d\n",v[i]) ;
}

int main(void) {
   int v[10] = {83,31,91,46,27,20,96,25,96,80};
   bsort(v,10);
   exibe(v,10);
   return 0;
}


//          RECURSIVA
#include <stdio.h>

void troca(int v[], int i, int j) {
   int x = v[i];
   v[i] = v[j];
   v[j] = x;
}

void bubbleSort(int v[], int n) {
   		if (n < 1)return; 
      for (int i=0; i<n; i++) {
        if (v[i] > v[i+1]) 
          troca(v,i,i+1);  
            }
    bubbleSort(v, n-1); 
}

void exibe(int v[], int n) {
    for (int i=0; i<n; i++) printf("%d\n",v[i]) ;
}

int main(void) {
   int v[10] = {83,31,91,46,27,20,96,25,96,80};
   bubbleSort(v,10);
   exibe(v,10);
   return 0;
}
*/


/* 

────────────────────────────────────────────────────────────────────────────────────────
─██████──────────██████─██████████████─████████████████───██████████████─██████████████─
─██░░██████████████░░██─██░░░░░░░░░░██─██░░░░░░░░░░░░██───██░░░░░░░░░░██─██░░░░░░░░░░██─
─██░░░░░░░░░░░░░░░░░░██─██░░██████████─██░░████████░░██───██░░██████████─██░░██████████─
─██░░██████░░██████░░██─██░░██─────────██░░██────██░░██───██░░██─────────██░░██─────────
─██░░██──██░░██──██░░██─██░░██████████─██░░████████░░██───██░░██─────────██░░██████████─
─██░░██──██░░██──██░░██─██░░░░░░░░░░██─██░░░░░░░░░░░░██───██░░██──██████─██░░░░░░░░░░██─
─██░░██──██████──██░░██─██░░██████████─██░░██████░░████───██░░██──██░░██─██░░██████████─
─██░░██──────────██░░██─██░░██─────────██░░██──██░░██─────██░░██──██░░██─██░░██─────────
─██░░██──────────██░░██─██░░██████████─██░░██──██░░██████─██░░██████░░██─██░░██████████─
─██░░██──────────██░░██─██░░░░░░░░░░██─██░░██──██░░░░░░██─██░░░░░░░░░░██─██░░░░░░░░░░██─
─██████──────────██████─██████████████─██████──██████████─██████████████─██████████████─
────────────────────────────────────────────────────────────────────────────────────────
//          NORMAL 

#include <stdio.h>
#include <stdlib.h>

void intercala(int v[], int p, int m, int u) {
   int *w = malloc((u-p+1)*sizeof(int));
   int i=p, j=m+1, k=0;
   while( i<=m && j<=u )
      w[k++] = (v[i]<v[j]) ? v[i++] : v[j++];
   while( i<=m ) w[k++] = v[i++];
   while( j<=u ) w[k++] = v[j++];
   for(k=0; k<=u-p; k++) v[p+k] = w[k];
   free(w);
}

void ms(int v[], int p, int u) {
   if( p==u ) return;
   int m = (p+u)/2;
   ms(v,p,m);
   ms(v,m+1,u);
   intercala(v,p,m,u);
}

void msort(int v[], int n) {
   ms(v,0,n-1);
}

void exibe(int v[], int n) {
    for (int i=0; i<n; i++) printf("%d\n",v[i]) ;
}

int main(void) {
   int v[10] = {83,31,91,46,27,20,96,25,96,80};
   msort(v,10);
   exibe(v,10);
   return 0;
}


//          RECURSIVA

#include <stdio.h>
#include <stdlib.h>

void intercala(int v[], int p, int m, int u) {
   int *w = malloc((u-p+1)*sizeof(int));
   int i=p, j=m+1, k=0;
   while( i<=m && j<=u )
      w[k++] = (v[i]<v[j]) ? v[i++] : v[j++];
   while( i<=m ) w[k++] = v[i++];
   while( j<=u ) w[k++] = v[j++];
   for(k=0; k<=u-p; k++) v[p+k] = w[k];
   free(w);
}

void mergeSort(int v[],int ini, int fim, int aux[])
{
   int meio = (fim+ini)/2;
   if(ini < fim)
   {
      mergeSort(v,ini,meio,aux);
      mergeSort(v,meio+1,fim,aux);
      intercala(v,ini,meio,fim);}
   }

int main(void)
{
   int v[]={12,90,47,-9,78,45,78,3323,1,2,34,20};
   int aux[12];
   int i;
   mergeSort(v, 0, 11, aux);
   for(i=0; i<12; i++) printf("\n %d",v[i]);
   return 0;
}

*/


/*

──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
─██████████████─██████──────────██████─██████████████─██████──██████─████████████████───████████████████───██████████████─
─██░░░░░░░░░░██─██░░██████████████░░██─██░░░░░░░░░░██─██░░██──██░░██─██░░░░░░░░░░░░██───██░░░░░░░░░░░░██───██░░░░░░░░░░██─
─██░░██████████─██░░░░░░░░░░░░░░░░░░██─██░░██████░░██─██░░██──██░░██─██░░████████░░██───██░░████████░░██───██░░██████░░██─
─██░░██─────────██░░██████░░██████░░██─██░░██──██░░██─██░░██──██░░██─██░░██────██░░██───██░░██────██░░██───██░░██──██░░██─
─██░░██████████─██░░██──██░░██──██░░██─██░░██████░░██─██░░██──██░░██─██░░████████░░██───██░░████████░░██───██░░██████░░██─
─██░░░░░░░░░░██─██░░██──██░░██──██░░██─██░░░░░░░░░░██─██░░██──██░░██─██░░░░░░░░░░░░██───██░░░░░░░░░░░░██───██░░░░░░░░░░██─
─██░░██████████─██░░██──██████──██░░██─██░░██████████─██░░██──██░░██─██░░██████░░████───██░░██████░░████───██░░██████░░██─
─██░░██─────────██░░██──────────██░░██─██░░██─────────██░░██──██░░██─██░░██──██░░██─────██░░██──██░░██─────██░░██──██░░██─
─██░░██████████─██░░██──────────██░░██─██░░██─────────██░░██████░░██─██░░██──██░░██████─██░░██──██░░██████─██░░██──██░░██─
─██░░░░░░░░░░██─██░░██──────────██░░██─██░░██─────────██░░░░░░░░░░██─██░░██──██░░░░░░██─██░░██──██░░░░░░██─██░░██──██░░██─
─██████████████─██████──────────██████─██████─────────██████████████─██████──██████████─██████──██████████─██████──██████─
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
Crie a função recursiva empurra(v,u), que “empurra” um item máximo do vetor v para a posição u de v, possivelmente alterando a ordem dos demais itens do vetor. Por exemplo, o código abaixo deve produzir a saída indicada a seguir:

#include <stdio.h>
#include <stdlib.h>

void exibe (int v[], int n) {
    for (int i=0; i<n; i++) printf("%d\n",v[i]) ;
}


void troca(int v[], int i, int j) {
   int x = v[i];
   v[i] = v[j];
   v[j] = x;
}

void empurra (int v[], int u) {
    if (u==0) return; 
    empurra(v,u-1);
    if (v[u-1] > v[u]) troca (v, u-1, u) ; 
}


int main (void) {
int v[9] = {51,82,38,99,75,19,69,46,27};
empurra(v,8);
exibe(v,9);
//Saída: {51,38,82,75,19,69,46,27,99}  
return 0; 
}

*/




/*          //  Crie a função recursiva bsr(v,n), que usa a função empurra() e a estratégia do bubble sort, para organizar os n itens do vetor v em ordem crescente.

//int v[9] = {51,82,38,99,75,19,69,46,27};
//bsr(v,9);
//exibe(v,9);
//Saída: {19,27,38,46,51,69,75,82,99}

#include <stdio.h>
#include <stdlib.h>
void exibe (int v[], int n) {
    for (int i=0; i<n; i++) printf("%d\n",v[i]) ;
}


void troca(int v[], int i, int j) {
   int x = v[i];
   v[i] = v[j];
   v[j] = x;
}

void empurra (int v[], int u) {
    if (u==0) return; 
    empurra(v,u-1);
    if (v[u-1] > v[u]) troca (v, u-1, u) ; 
}

void bsr(int v[], int n) {
    if (n < 2) return; 
    empurra (v, n-1); 
    bsr(v, n-1); 

}

int main (void) {
int v[9] = {51,82,38,99,75,19,69,46,27};
bsr(v,9);
exibe(v,9);
//Saída: {19,27,38,46,51,69,75,82,99}
return 0;
}
*/





/* 

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
─██████████─██████──────────██████─██████████████─██████████████─████████████████───██████████████─██████████████─██████─────────██████████████─
─██░░░░░░██─██░░██████████──██░░██─██░░░░░░░░░░██─██░░░░░░░░░░██─██░░░░░░░░░░░░██───██░░░░░░░░░░██─██░░░░░░░░░░██─██░░██─────────██░░░░░░░░░░██─
─████░░████─██░░░░░░░░░░██──██░░██─██████░░██████─██░░██████████─██░░████████░░██───██░░██████████─██░░██████░░██─██░░██─────────██░░██████░░██─
───██░░██───██░░██████░░██──██░░██─────██░░██─────██░░██─────────██░░██────██░░██───██░░██─────────██░░██──██░░██─██░░██─────────██░░██──██░░██─
───██░░██───██░░██──██░░██──██░░██─────██░░██─────██░░██████████─██░░████████░░██───██░░██─────────██░░██████░░██─██░░██─────────██░░██████░░██─
───██░░██───██░░██──██░░██──██░░██─────██░░██─────██░░░░░░░░░░██─██░░░░░░░░░░░░██───██░░██─────────██░░░░░░░░░░██─██░░██─────────██░░░░░░░░░░██─
───██░░██───██░░██──██░░██──██░░██─────██░░██─────██░░██████████─██░░██████░░████───██░░██─────────██░░██████░░██─██░░██─────────██░░██████░░██─
───██░░██───██░░██──██░░██████░░██─────██░░██─────██░░██─────────██░░██──██░░██─────██░░██─────────██░░██──██░░██─██░░██─────────██░░██──██░░██─
─████░░████─██░░██──██░░░░░░░░░░██─────██░░██─────██░░██████████─██░░██──██░░██████─██░░██████████─██░░██──██░░██─██░░██████████─██░░██──██░░██─
─██░░░░░░██─██░░██──██████████░░██─────██░░██─────██░░░░░░░░░░██─██░░██──██░░░░░░██─██░░░░░░░░░░██─██░░██──██░░██─██░░░░░░░░░░██─██░░██──██░░██─
─██████████─██████──────────██████─────██████─────██████████████─██████──██████████─██████████████─██████──██████─██████████████─██████──██████─
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────


#include <stdio.h>
#include <stdlib.h>

void exibe (int v[], int n) {
    for (int i=0; i<n; i++) printf("%d\n",v[i]) ;
}

void intercala(int v[], int p, int m, int u) {
   int *w = malloc((u-p+1)*sizeof(int));
   int i=p, j=m+1, k=0;
   while( i<=m && j<=u )
      w[k++] = (v[i]<v[j]) ? v[i++] : v[j++];
   while( i<=m ) w[k++] = v[i++];
   while( j<=u ) w[k++] = v[j++];
   for(k=0; k<=u-p; k++) v[p+k] = w[k];
   free(w);
}

int main(void) {
   int v[8] = {31,48,60,80,19,27,52,75};
   intercala(v,0,3,7);
   exibe(v,8);
   int w[9] = {10,82,27,38,41,53,60,75,99};
   intercala(w,0,1,9);
   exibe(w,9);
   return 0;
}
*/ 


/*

─────────────────────────────────────────────────────────────────────────
─████████████████───██████████████─██████──────────██████─████████████───
─██░░░░░░░░░░░░██───██░░░░░░░░░░██─██░░██████████──██░░██─██░░░░░░░░████─
─██░░████████░░██───██░░██████░░██─██░░░░░░░░░░██──██░░██─██░░████░░░░██─
─██░░██────██░░██───██░░██──██░░██─██░░██████░░██──██░░██─██░░██──██░░██─
─██░░████████░░██───██░░██████░░██─██░░██──██░░██──██░░██─██░░██──██░░██─
─██░░░░░░░░░░░░██───██░░░░░░░░░░██─██░░██──██░░██──██░░██─██░░██──██░░██─
─██░░██████░░████───██░░██████░░██─██░░██──██░░██──██░░██─██░░██──██░░██─
─██░░██──██░░██─────██░░██──██░░██─██░░██──██░░██████░░██─██░░██──██░░██─
─██░░██──██░░██████─██░░██──██░░██─██░░██──██░░░░░░░░░░██─██░░████░░░░██─
─██░░██──██░░░░░░██─██░░██──██░░██─██░░██──██████████░░██─██░░░░░░░░████─
─██████──██████████─██████──██████─██████──────────██████─████████████───
─────────────────────────────────────────────────────────────────────────
Faça um programa para testar o funcionamento da função a seguir, que preenche um vetor v com n inteiros aleatórios, gerados a partir da semente s, escolhidos no intervalo [0,999].

#include<stdlib.h>
#include<stdio.h>
#include<time.h>

void preenche(int v[], int n, int s) {
   srand(s); // definida em stdlib.h
   for(int i=0; i<n; i++) v[i] = rand()%1000;
}

void exibe (int v[], int n) {
    for (int i=0; i<n; i++) printf("%d\n",v[i]) ;
}

int main (void){
    puts("quantos numeros aleatorios vc quer gerar?\n"); 
    int n;
    scanf("%d",&n) ; 
    int vetor[n]; 
    int s = time(NULL) ;

    preenche (vetor,n,s); 
    exibe(vetor,n);
    return 0;
}

*/


/* 

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
─██████████████──────██████─────────██████████─██████──────────██████─██████████████─██████████████─████████████████───
─██░░░░░░░░░░██──────██░░██─────────██░░░░░░██─██░░██████████──██░░██─██░░░░░░░░░░██─██░░░░░░░░░░██─██░░░░░░░░░░░░██───
─██░░██████░░██──────██░░██─────────████░░████─██░░░░░░░░░░██──██░░██─██░░██████████─██░░██████░░██─██░░████████░░██───
─██░░██──██░░██──────██░░██───────────██░░██───██░░██████░░██──██░░██─██░░██─────────██░░██──██░░██─██░░██────██░░██───
─██░░██████░░████────██░░██───────────██░░██───██░░██──██░░██──██░░██─██░░██████████─██░░██████░░██─██░░████████░░██───
─██░░░░░░░░░░░░██────██░░██───────────██░░██───██░░██──██░░██──██░░██─██░░░░░░░░░░██─██░░░░░░░░░░██─██░░░░░░░░░░░░██───
─██░░████████░░██────██░░██───────────██░░██───██░░██──██░░██──██░░██─██░░██████████─██░░██████░░██─██░░██████░░████───
─██░░██────██░░██────██░░██───────────██░░██───██░░██──██░░██████░░██─██░░██─────────██░░██──██░░██─██░░██──██░░██─────
─██░░████████░░██────██░░██████████─████░░████─██░░██──██░░░░░░░░░░██─██░░██████████─██░░██──██░░██─██░░██──██░░██████─
─██░░░░░░░░░░░░██────██░░░░░░░░░░██─██░░░░░░██─██░░██──██████████░░██─██░░░░░░░░░░██─██░░██──██░░██─██░░██──██░░░░░░██─
─████████████████────██████████████─██████████─██████──────────██████─██████████████─██████──██████─██████──██████████─
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
                // N O R M A L 

/*
#include <stdio.h>

int lsearch(int x, int v[], int n) {
    int i;
	i = n-1; 

	while (i>=0 && v[i]!=x) i--;

  	if (v[i]==x) return 1; 
	return 0;
}

int main(void) {
   int v[8] = {66,80,31,48,27,75,19,52};
   printf("27: %d\n", lsearch(27,v,8)); //encontrado, retorna 1
   printf("51: %d\n", lsearch(52,v,8)); //nao encontrado, retorna 0 
   return 0;
}

*/ 

/*            // R E C U R S I V A                             rlsearch(x,v,n)

#include <stdio.h>
int rlsearch (int x, int v[], int n) {
     if (x == v[n]) return 1; 
     if (n<0) return 0;
     else return rlsearch(x,v,n-1);
     return 0;
}


int main(void) {
   int v[8] = {66,80,31,48,27,75,19,52};
   printf("27: %d\n", rlsearch(28,v,8)); //encontrado, retorna 1
   printf("51: %d\n", rlsearch(52,v,8)); //nao encontrado, retorna 0 
   return 0;
}
*/


/* 

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
─██████████████──────██████████████───██████████─██████──────────██████─██████████████─████████████████───██████████─██████████████─
─██░░░░░░░░░░██──────██░░░░░░░░░░██───██░░░░░░██─██░░██████████──██░░██─██░░░░░░░░░░██─██░░░░░░░░░░░░██───██░░░░░░██─██░░░░░░░░░░██─
─██░░██████░░██──────██░░██████░░██───████░░████─██░░░░░░░░░░██──██░░██─██░░██████░░██─██░░████████░░██───████░░████─██░░██████░░██─
─██░░██──██░░██──────██░░██──██░░██─────██░░██───██░░██████░░██──██░░██─██░░██──██░░██─██░░██────██░░██─────██░░██───██░░██──██░░██─
─██░░██████░░████────██░░██████░░████───██░░██───██░░██──██░░██──██░░██─██░░██████░░██─██░░████████░░██─────██░░██───██░░██████░░██─
─██░░░░░░░░░░░░██────██░░░░░░░░░░░░██───██░░██───██░░██──██░░██──██░░██─██░░░░░░░░░░██─██░░░░░░░░░░░░██─────██░░██───██░░░░░░░░░░██─
─██░░████████░░██────██░░████████░░██───██░░██───██░░██──██░░██──██░░██─██░░██████░░██─██░░██████░░████─────██░░██───██░░██████░░██─
─██░░██────██░░██────██░░██────██░░██───██░░██───██░░██──██░░██████░░██─██░░██──██░░██─██░░██──██░░██───────██░░██───██░░██──██░░██─
─██░░████████░░██────██░░████████░░██─████░░████─██░░██──██░░░░░░░░░░██─██░░██──██░░██─██░░██──██░░██████─████░░████─██░░██──██░░██─
─██░░░░░░░░░░░░██────██░░░░░░░░░░░░██─██░░░░░░██─██░░██──██████████░░██─██░░██──██░░██─██░░██──██░░░░░░██─██░░░░░░██─██░░██──██░░██─
─████████████████────████████████████─██████████─██████──────────██████─██████──██████─██████──██████████─██████████─██████──██████─
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
                // N O R M A L 

#include <stdio.h>

int bsearch(int x, int v[], int n) {
   int p = 0;
   int u = n-1;
   while( p<=u ) {
      int m = (p+u)/2;
      if( x==v[m] ) return 1;
      if( x<v[m] ) u = m-1;
      else p = m+1; 
   }
   return 0;
}

int main(void) {
   int v[8] = {19,27,31,48,52,66,75,80};
   printf("27: %d\n", bsearch(27,v,8));
   printf("51: %d\n", bsearch(51,v,8));
   return 0;
}
*/

/*                // R E C U R S I V A         

// rbsearch(x,v,p,u), que faz uma busca binária para determinar se o item x está no vetor crescente v, indexado de p até u.
/* CASOS-BASE:
if ( x==v[m] ) return 1; 
if ( p>u )  return 0; //condicao onde ele n entraria no while
*/

/*

#include <stdio.h>
#include <stdlib.h>

int rbsearch (int x, int v[], int p, int u) {
   if( p>u ) return 0;
   int m = (p+u)/2;
   if( x<v[m] ) return rbsearch(x,v,p,m-1);
   if( x>v[m] ) return rbsearch(x,v,m+1,u);
   return 1; // se x não é menor, nem maior que v[m], só pode ser igual a v[m]!
}

int main (void)
{
   int v[8] = {19,27,31,48,52,66,75,80};
   printf("66: %d\n", rbsearch(66,v,0,7));
   printf("53: %d\n", rbsearch(48,v,0,7));
   printf("52: %d\n", rbsearch(52,v,0,7));
   return 0;
}

*/


/*

───────────────────────────────────────────────────────────────────────────────────────
─██████─────────██████████─██████████████─██████████████─██████████████─██████████████─
─██░░██─────────██░░░░░░██─██░░░░░░░░░░██─██░░░░░░░░░░██─██░░░░░░░░░░██─██░░░░░░░░░░██─
─██░░██─────────████░░████─██░░██████████─██████░░██████─██░░██████░░██─██░░██████████─
─██░░██───────────██░░██───██░░██─────────────██░░██─────██░░██──██░░██─██░░██─────────
─██░░██───────────██░░██───██░░██████████─────██░░██─────██░░██████░░██─██░░██████████─
─██░░██───────────██░░██───██░░░░░░░░░░██─────██░░██─────██░░░░░░░░░░██─██░░░░░░░░░░██─
─██░░██───────────██░░██───██████████░░██─────██░░██─────██░░██████░░██─██████████░░██─
─██░░██───────────██░░██───────────██░░██─────██░░██─────██░░██──██░░██─────────██░░██─
─██░░██████████─████░░████─██████████░░██─────██░░██─────██░░██──██░░██─██████████░░██─
─██░░░░░░░░░░██─██░░░░░░██─██░░░░░░░░░░██─────██░░██─────██░░██──██░░██─██░░░░░░░░░░██─
─██████████████─██████████─██████████████─────██████─────██████──██████─██████████████─
───────────────────────────────────────────────────────────────────────────────────────
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
─██████████████─████████████████───████████████───██████████████─██████──────────██████─██████████████─████████████───██████████████─██████████████─
─██░░░░░░░░░░██─██░░░░░░░░░░░░██───██░░░░░░░░████─██░░░░░░░░░░██─██░░██████████──██░░██─██░░░░░░░░░░██─██░░░░░░░░████─██░░░░░░░░░░██─██░░░░░░░░░░██─
─██░░██████░░██─██░░████████░░██───██░░████░░░░██─██░░██████████─██░░░░░░░░░░██──██░░██─██░░██████░░██─██░░████░░░░██─██░░██████░░██─██░░██████████─
─██░░██──██░░██─██░░██────██░░██───██░░██──██░░██─██░░██─────────██░░██████░░██──██░░██─██░░██──██░░██─██░░██──██░░██─██░░██──██░░██─██░░██─────────
─██░░██──██░░██─██░░████████░░██───██░░██──██░░██─██░░██████████─██░░██──██░░██──██░░██─██░░██████░░██─██░░██──██░░██─██░░██████░░██─██░░██████████─
─██░░██──██░░██─██░░░░░░░░░░░░██───██░░██──██░░██─██░░░░░░░░░░██─██░░██──██░░██──██░░██─██░░░░░░░░░░██─██░░██──██░░██─██░░░░░░░░░░██─██░░░░░░░░░░██─
─██░░██──██░░██─██░░██████░░████───██░░██──██░░██─██░░██████████─██░░██──██░░██──██░░██─██░░██████░░██─██░░██──██░░██─██░░██████░░██─██████████░░██─
─██░░██──██░░██─██░░██──██░░██─────██░░██──██░░██─██░░██─────────██░░██──██░░██████░░██─██░░██──██░░██─██░░██──██░░██─██░░██──██░░██─────────██░░██─
─██░░██████░░██─██░░██──██░░██████─██░░████░░░░██─██░░██████████─██░░██──██░░░░░░░░░░██─██░░██──██░░██─██░░████░░░░██─██░░██──██░░██─██████████░░██─
─██░░░░░░░░░░██─██░░██──██░░░░░░██─██░░░░░░░░████─██░░░░░░░░░░██─██░░██──██████████░░██─██░░██──██░░██─██░░░░░░░░████─██░░██──██░░██─██░░░░░░░░░░██─
─██████████████─██████──██████████─████████████───██████████████─██████──────────██████─██████──██████─████████████───██████──██████─██████████████─
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────




█████████████████████████████████████████████████████████████████████████████████████
█─▄▄▄─█▄─▄▄▀█▄─▄▄─█─▄▄▄▄█─▄▄▄─█▄─▄▄─█▄─▀█▄─▄█─▄─▄─█▄─▄▄─███████████─▄▄▄▄█▄─▄█▄─▀█▀─▄█
█─███▀██─▄─▄██─▄█▀█▄▄▄▄─█─███▀██─▄█▀██─█▄▀─████─████─▄█▀███████████▄▄▄▄─██─███─█▄█─██
▀▄▄▄▄▄▀▄▄▀▄▄▀▄▄▄▄▄▀▄▄▄▄▄▀▄▄▄▄▄▀▄▄▄▄▄▀▄▄▄▀▀▄▄▀▀▄▄▄▀▀▄▄▄▄▄▀▀▀▀▀▀▀▀▀▀▀▄▄▄▄▄▀▄▄▄▀▄▄▄▀▄▄▄▀

//          Crie a função recursiva osc(L), que verifica se L é uma lista ordenada de forma simplesmente crescente (i.e., cada item é menor ou igual ao item seguinte na lista). 


#include <stdio.h>
#include <stdlib.h>

typedef int Item;

typedef struct no {
   Item item;
   struct no *prox;
} *Lista;

Lista no(Item x, Lista p) {
   Lista n = malloc(sizeof(struct no));
   n->item = x;
   n->prox = p;
   return n;
}

void exibe(Lista L) {
   printf("[");
   while( L != NULL ) {
      printf("%d",L->item);
	  if (L->prox != NULL) printf(","); 
      L = L->prox;
   }
 printf("]\n");
}

// versao com while::::::::::
//int osc(Lista L){
//    while (L->prox != NULL){
//		if ((L->item) <= (L->prox->item))	L=L->prox; 
//   else return 0;
//	                           }
//	return 1;
// }
// ::::::::::
// enquanto nao tiver no ultimo, verifica condicao e anda na lista
// se chegar no ultimo, retorna 1  pq passou reto satisfazendo a condicao de ser menor ou igual 

int osc(Lista L) {
  if (L==NULL) return 0; // ????
  if (L->prox == NULL) return 1;
  if (L->item <= L->prox->item) return osc(L->prox);
  return 0;
}


int main(void)
{
    Lista A = no(3,(no(5,no(6,no(7,NULL))))); 
    Lista B = no(1,(no(3,no(2,no(5,NULL)))));
    exibe(A);
    exibe(B);
    printf("cada item é menor ou igual ao item seguinte da lista?: %d\n",osc(A));
    printf("cada item é menor ou igual ao item seguinte da lista?: %d\n",osc(B));
}


██████████████████████████████████████████████████████████████████████████████████████████████████████████
█─▄▄▄─█▄─▄▄▀█▄─▄▄─█─▄▄▄▄█─▄▄▄─█▄─▄▄─█▄─▀█▄─▄█─▄─▄─█▄─▄▄─██████████▄─▄▄─█─▄▄▄▄█─▄─▄─█▄─▄▄▀█▄─▄█─▄─▄─██▀▄─██
█─███▀██─▄─▄██─▄█▀█▄▄▄▄─█─███▀██─▄█▀██─█▄▀─████─████─▄█▀███████████─▄█▀█▄▄▄▄─███─████─▄─▄██─████─████─▀─██
▀▄▄▄▄▄▀▄▄▀▄▄▀▄▄▄▄▄▀▄▄▄▄▄▀▄▄▄▄▄▀▄▄▄▄▄▀▄▄▄▀▀▄▄▀▀▄▄▄▀▀▄▄▄▄▄▀▀▀▀▀▀▀▀▀▀▄▄▄▄▄▀▄▄▄▄▄▀▀▄▄▄▀▀▄▄▀▄▄▀▄▄▄▀▀▄▄▄▀▀▄▄▀▄▄▀

//          Crie a função recursiva oec(L), que verifica se L é uma lista ordenada de forma estritamente crescente (i.e., cada item é menor que item seguinte na lista).

#include <stdio.h>
#include <stdlib.h>

typedef int Item;

typedef struct no {
   Item item;
   struct no *prox;
} *Lista;

Lista no(Item x, Lista p) {
   Lista n = malloc(sizeof(struct no));
   n->item = x;
   n->prox = p;
   return n;
}

void exibe(Lista L) {
   printf("[");
   while( L != NULL ) {
      printf("%d",L->item);
	  if (L->prox != NULL) printf(","); 
      L = L->prox;
   }
 printf("]\n");
}

int oec(Lista L) {
  if (L==NULL) return 0; // ????
  if (L->prox == NULL) return 1;
  if (L->item < L->prox->item) return oec(L->prox);
  return 0;
}


int main(void)
{
    Lista A = no(3,(no(5,no(5,no(7,NULL))))); 
    Lista B = no(1,(no(3,no(2,no(5,NULL)))));
    exibe(A);
    exibe(B);
    printf("cada item é menor ou igual ao item seguinte da lista?: %d\n",oec(A));
    printf("cada item é menor ou igual ao item seguinte da lista?: %d\n",oec(B));
}



//          Crie a função recursiva osd(L), que verifica se L é uma lista ordenada de forma simplesmente decrescente (i.e., cada item é maior ou igual ao item seguinte na lista).

█████████████████████████████████████████████████████████████████████████████████████████████████
█▄─▄▄▀█▄─▄▄─█─▄▄▄─█▄─▄▄▀█▄─▄▄─█─▄▄▄▄█─▄▄▄─█▄─▄▄─█▄─▀█▄─▄█─▄─▄─█▄─▄▄─███████████─▄▄▄▄█▄─▄█▄─▀█▀─▄█
██─██─██─▄█▀█─███▀██─▄─▄██─▄█▀█▄▄▄▄─█─███▀██─▄█▀██─█▄▀─████─████─▄█▀███████████▄▄▄▄─██─███─█▄█─██
▀▄▄▄▄▀▀▄▄▄▄▄▀▄▄▄▄▄▀▄▄▀▄▄▀▄▄▄▄▄▀▄▄▄▄▄▀▄▄▄▄▄▀▄▄▄▄▄▀▄▄▄▀▀▄▄▀▀▄▄▄▀▀▄▄▄▄▄▀▀▀▀▀▀▀▀▀▀▀▄▄▄▄▄▀▄▄▄▀▄▄▄▀▄▄▄▀


#include <stdio.h>
#include <stdlib.h>

typedef int Item;

typedef struct no {
   Item item;
   struct no *prox;
} *Lista;

Lista no(Item x, Lista p) {
   Lista n = malloc(sizeof(struct no));
   n->item = x;
   n->prox = p;
   return n;
}

void exibe(Lista L) {
   printf("[");
   while( L != NULL ) {
      printf("%d",L->item);
	  if (L->prox != NULL) printf(","); 
      L = L->prox;
   }
 printf("]\n");
}


int osd(Lista L) {
  if (L==NULL) return 0; // ????
  if (L->prox == NULL) return 1;
  if (L->item >= L->prox->item) return osd(L->prox);
  return 0;
}

//          Crie a função recursiva oed(L), que verifica se L é uma lista ordenada de forma estritamente decrescente (i.e., cada item é maior que item seguinte na lista).

██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
█▄─▄▄▀█▄─▄▄─█─▄▄▄─█▄─▄▄▀█▄─▄▄─█─▄▄▄▄█─▄▄▄─█▄─▄▄─█▄─▀█▄─▄█─▄─▄─█▄─▄▄─██████████▄─▄▄─█─▄▄▄▄█─▄─▄─█▄─▄▄▀█▄─▄█─▄─▄─██▀▄─██
██─██─██─▄█▀█─███▀██─▄─▄██─▄█▀█▄▄▄▄─█─███▀██─▄█▀██─█▄▀─████─████─▄█▀███████████─▄█▀█▄▄▄▄─███─████─▄─▄██─████─████─▀─██
▀▄▄▄▄▀▀▄▄▄▄▄▀▄▄▄▄▄▀▄▄▀▄▄▀▄▄▄▄▄▀▄▄▄▄▄▀▄▄▄▄▄▀▄▄▄▄▄▀▄▄▄▀▀▄▄▀▀▄▄▄▀▀▄▄▄▄▄▀▀▀▀▀▀▀▀▀▀▄▄▄▄▄▀▄▄▄▄▄▀▀▄▄▄▀▀▄▄▀▄▄▀▄▄▄▀▀▄▄▄▀▀▄▄▀▄▄▀

#include <stdio.h>
#include <stdlib.h>

typedef int Item;

typedef struct no {
   Item item;
   struct no *prox;
} *Lista;

Lista no(Item x, Lista p) {
   Lista n = malloc(sizeof(struct no));
   n->item = x;
   n->prox = p;
   return n;
}

void exibe(Lista L) {
   printf("[");
   while( L != NULL ) {
      printf("%d",L->item);
	  if (L->prox != NULL) printf(","); 
      L = L->prox;
   }
 printf("]\n");
}

int oed(Lista L) {
  if (L==NULL) return 0; // ????
  if (L->prox == NULL) return 1;
  if (L->item > L->prox->item) return oed(L->prox);
  return 0;
}


int main(void)
{
    Lista A = no(5,(no(5,no(4,no(1,NULL))))); 
    Lista B = no(5,(no(4,no(3,no(1,NULL)))));
    exibe(A);
    exibe(B);
    printf("cada item é menor ou igual ao item seguinte da lista?: %d\n",oed(A));
    printf("cada item é menor ou igual ao item seguinte da lista?: %d\n",oed(B));
}

*/

/*

█████████████████████████████████████████████████████████████████████████
█▄─▄▄─█▄─▄▄─█▄─▄▄▀█─▄─▄─█▄─▄▄─█▄─▀█▄─▄█─▄▄▄─█▄─▄▄─██████▀▄─████████▄─▄███
██─▄▄▄██─▄█▀██─▄─▄███─████─▄█▀██─█▄▀─██─███▀██─▄█▀██████─▀─█████████─██▀█
▀▄▄▄▀▀▀▄▄▄▄▄▀▄▄▀▄▄▀▀▄▄▄▀▀▄▄▄▄▄▀▄▄▄▀▀▄▄▀▄▄▄▄▄▀▄▄▄▄▄▀▀▀▀▀▄▄▀▄▄▀▀▀▀▀▀▀▄▄▄▄▄▀

//                   NORMAL 
#include <stdio.h>
#include <stdlib.h>

typedef int Item;

typedef struct no {
   Item item;
   struct no *prox;
} *Lista;

Lista no(Item x, Lista p) {
   Lista n = malloc(sizeof(struct no));
   n->item = x;
   n->prox = p;
   return n;
}

void exibe(Lista L) {
   printf("[");
   while( L != NULL ) {
      printf("%d",L->item);
	  if (L->prox != NULL) printf(","); 
      L = L->prox;
   }
 printf("]\n");
}

int pert(Item x, Lista L) {
	while (L!=NULL && L->item < x)      L= L->prox; 
	return (L!=NULL && L->item==x);
}


int main(void)
{
    Lista A = no(0,(no(1,no(2,no(3,NULL))))); 
    Lista B = no(0,(no(4,no(5,no(6,NULL)))));
    exibe(A);
    exibe(B);
    printf("pertence? %d\n",pert(2,A));
    printf("pertence? %d\n",pert(3,B)); 
    return 0;
    }




//                     RECURSIVA

#include <stdio.h>
#include <stdlib.h>

typedef int Item;

typedef struct no {
   Item item;
   struct no *prox;
} *Lista;

Lista no(Item x, Lista p) {
   Lista n = malloc(sizeof(struct no));
   n->item = x;
   n->prox = p;
   return n;
}

void exibe(Lista L) {
   printf("[");
   while( L != NULL ) {
      printf("%d",L->item);
	  if (L->prox != NULL) printf(","); 
      L = L->prox;
   }
 printf("]\n");
}
  void ins(Item x, Lista *L) {
     while( *L != NULL && (*L)->item < x ) 
        L = &(*L)->prox;
     *L = no(x,*L);
  }

  int pert(Item x, Lista L) {
    if (L!=NULL && L->item >= x) return (L!=NULL && L->item==x);
	 if (L->item < x) return (pert(x,L->prox));  
  }

int main(void) {
   Lista I = no(1,no(1,no(2,no(3,NULL))));
	exibe(I);
   printf("%d\n", pert(2,I));
   printf("%d\n", pert(0,I));
   return 0;
}
*/
